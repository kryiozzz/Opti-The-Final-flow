@model Opti.Models.WorkerDashboardViewModel
@{
    ViewData["Title"] = "Worker Dashboard";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Worker Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/worker_dashboard.css">
</head>

<body>

    <!-- Include the Worker Sidebar -->
    @await Html.PartialAsync("_WorkerSidebar")

    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">Worker Dashboard</h1>
        </div>

        <!-- Stats Section -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">
                    <i class="fas fa-cogs" style="color: #4f46e5;"></i>
                    Operational Machines
                </div>
                <div class="stat-value">@Model.MachinesOperational</div>
                <div class="stat-change stat-increase">
                    <i class="fas fa-arrow-up"></i>
                    5% from last week
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-title">
                    <i class="fas fa-tools" style="color: #ef4444;"></i>
                    Under Maintenance
                </div>
                <div class="stat-value">@Model.MachinesUnderMaintenance</div>
                <div class="stat-change stat-decrease">
                    <i class="fas fa-arrow-down"></i>
                    2% from last week
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-title">
                    <i class="fas fa-clipboard-check" style="color: #10b981;"></i>
                    Completed Orders
                </div>
                <div class="stat-value">@Model.ProductionOrdersCompleted</div>
                <div class="stat-change stat-increase">
                    <i class="fas fa-arrow-up"></i>
                    12% from last month
                </div>
            </div>
        </div>

        <!-- Machine List Section -->
        <div class="table-container">
            <div class="chart-header">
                <h2 class="chart-title">
                    <i class="fas fa-cogs" style="color: #4f46e5;"></i>
                    Machine Status
                </h2>
                <div class="chart-actions">
                    <div class="filter-group">
                        <select id="machineStatusFilter" class="filter-select">
                            <option value="all" selected>All Statuses</option>
                            <option value="operational">Operational</option>
                            <option value="undermaintenance">Under Maintenance</option>
                            <option value="offline">Offline</option>
                        </select>
                        <button id="applyMachineFilter" class="btn btn-outline">
                            <i class="fas fa-filter"></i>
                            Apply Filter
                        </button>
                    </div>
                </div>
            </div>

            <table class="data-table" id="machinesTable">
                <thead>
                    <tr>
                        <th>Machine ID</th>
                        <th>Machine Name</th>
                        <th>Status</th>
                        <th>Last Maintenance</th>
                    </tr>
                </thead>
                <tbody id="machinesTableBody">
                    @if (Model.Machine != null && Model.Machine.Any())
                    {
                        @for (int i = 0; i < Model.Machine.Count(); i++)
                        {
                            var machine = Model.Machine.ElementAt(i);
                            <tr data-status="@machine.Status.ToLower().Replace(" ", "")" style="@(i >= 5 ? "display: none;" : "")">
                                <td>#@machine.MachineId</td>
                                <td>@machine.MachineName</td>
                                <td>
                                    @if (machine.Status == "Operational")
                                    {
                                        <span class="badge badge-success">
                                            <i class="fas fa-check-circle"></i>
                                            Operational
                                        </span>
                                    }
                                    else if (machine.Status == "Under Maintenance")
                                    {
                                        <span class="badge badge-warning">
                                            <i class="fas fa-tools"></i>
                                            Maintenance
                                        </span>
                                    }
                                    else if (machine.Status == "Offline")
                                    {
                                        <span class="badge badge-danger">
                                            <i class="fas fa-times-circle"></i>
                                            Offline
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-neutral">@machine.Status</span>
                                    }
                                </td>
                                <td>@machine.LastMaintenanceDate.ToShortDateString()</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">No machines found in the database.</td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination for Machines -->
            <div class="pagination-container">
                <button id="machinesPrevBtn" class="pagination-btn">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <span id="machinesPagination" class="pagination-info">
                    Showing <span id="machinesStart">1</span>-<span id="machinesEnd">5</span> of <span id="machinesTotal">@Model.Machine.Count()</span>
                </span>
                <button id="machinesNextBtn" class="pagination-btn">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>

        <!-- Production Orders List Section -->
        <div class="table-container">
            <div class="chart-header">
                <h2 class="chart-title">
                    <i class="fas fa-clipboard-list" style="color: #10b981;"></i>
                    Production Orders
                </h2>
                <div class="chart-actions">
                    <div class="filter-group">
                        <select id="orderTypeFilter" class="filter-select">
                            <option value="all" selected>All Orders</option>
                            <option value="completed">Completed</option>
                            <option value="inprogress">In Progress</option>
                            <option value="pending">Pending</option>
                        </select>
                        <input type="date" id="orderDateFilter" class="filter-date" />
                        <button id="applyOrderFilter" class="btn btn-outline">
                            <i class="fas fa-filter"></i>
                            Apply Filter
                        </button>
                    </div>
                </div>
            </div>

            <table class="data-table" id="ordersTable">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Status</th>
                        <th>Due Date</th>
                        <th>Progress</th>
                    </tr>
                </thead>
                <tbody id="ordersTableBody">
                    @if (Model.ProductionOrders != null && Model.ProductionOrders.Any())
                    {
                        @for (int i = 0; i < Model.ProductionOrders.Count(); i++)
                        {
                            var order = Model.ProductionOrders.ElementAt(i);
                            <tr data-status="@order.Status.ToLower().Replace(" ", "")" data-date="@order.OrderDate.ToString("yyyy-MM-dd")" style="@(i >= 5 ? "display: none;" : "")">
                                <td>#@order.OrderId</td>
                                <td>@(order.Product != null ? order.Product.ProductName : "Unknown Product")</td>
                                <td>@order.Quantity</td>
                                <td>
                                    @if (order.Status == "Completed")
                                    {
                                        <span class="badge badge-success">
                                            <i class="fas fa-check-circle"></i>
                                            Completed
                                        </span>
                                    }
                                    else if (order.Status == "In Progress")
                                    {
                                        <span class="badge badge-warning">
                                            <i class="fas fa-spinner"></i>
                                            In Progress
                                        </span>
                                    }
                                    else if (order.Status == "Pending")
                                    {
                                        <span class="badge badge-neutral">
                                            <i class="fas fa-clock"></i>
                                            Pending
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-neutral">@order.Status</span>
                                    }
                                </td>
                                <td>@order.OrderDate.ToShortDateString()</td>
                                <td>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        @{
                                            var progress = order.Status == "Completed" ? 100 : order.Status == "In Progress" ? new Random().Next(10, 90) : 0;
                                        }
                                        <div class="bg-blue-600 h-2.5 rounded-full" style="width: @progress%"></div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No production orders found in the database.</td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination for Orders -->
            <div class="pagination-container">
                <button id="ordersPrevBtn" class="pagination-btn">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <span id="ordersPagination" class="pagination-info">
                    Showing <span id="ordersStart">1</span>-<span id="ordersEnd">5</span> of <span id="ordersTotal">@Model.ProductionOrders.Count()</span>
                </span>
                <button id="ordersNextBtn" class="pagination-btn">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Wait for DOM to be ready
        document.addEventListener('DOMContentLoaded', function() {
            // Pagination variables
            let machinesCurrentPage = 1;
            let ordersCurrentPage = 1;
            const itemsPerPage = 5;

            // Machines pagination
            const machinesTotal = @Model.Machine.Count();
            const machinesMaxPages = Math.ceil(machinesTotal / itemsPerPage);

            document.getElementById('machinesPrevBtn').addEventListener('click', function() {
                if (machinesCurrentPage > 1) {
                    machinesCurrentPage--;
                    updateMachinesDisplay();
                }
            });

            document.getElementById('machinesNextBtn').addEventListener('click', function() {
                if (machinesCurrentPage < machinesMaxPages) {
                    machinesCurrentPage++;
                    updateMachinesDisplay();
                }
            });

            function updateMachinesDisplay() {
                const rows = document.querySelectorAll('#machinesTableBody tr[data-status]');
                const start = (machinesCurrentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                rows.forEach((row, index) => {
                    if (index >= start && index < end) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Update pagination display
                document.getElementById('machinesStart').textContent = start + 1;
                document.getElementById('machinesEnd').textContent = Math.min(end, machinesTotal);

                // Update button states
                document.getElementById('machinesPrevBtn').disabled = machinesCurrentPage === 1;
                document.getElementById('machinesNextBtn').disabled = machinesCurrentPage === machinesMaxPages;
            }

            // Orders pagination
            const ordersTotal = @Model.ProductionOrders.Count();
            const ordersMaxPages = Math.ceil(ordersTotal / itemsPerPage);

            document.getElementById('ordersPrevBtn').addEventListener('click', function() {
                if (ordersCurrentPage > 1) {
                    ordersCurrentPage--;
                    updateOrdersDisplay();
                }
            });

            document.getElementById('ordersNextBtn').addEventListener('click', function() {
                if (ordersCurrentPage < ordersMaxPages) {
                    ordersCurrentPage++;
                    updateOrdersDisplay();
                }
            });

            function updateOrdersDisplay() {
                const rows = document.querySelectorAll('#ordersTableBody tr[data-status]');
                const start = (ordersCurrentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                rows.forEach((row, index) => {
                    if (index >= start && index < end) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Update pagination display
                document.getElementById('ordersStart').textContent = start + 1;
                document.getElementById('ordersEnd').textContent = Math.min(end, ordersTotal);

                // Update button states
                document.getElementById('ordersPrevBtn').disabled = ordersCurrentPage === 1;
                document.getElementById('ordersNextBtn').disabled = ordersCurrentPage === ordersMaxPages;
            }

            // Initialize displays
            updateMachinesDisplay();
            updateOrdersDisplay();

            // Filter functionality for machines
            document.getElementById('applyMachineFilter').addEventListener('click', function() {
                const statusFilter = document.getElementById('machineStatusFilter').value;
                const rows = document.querySelectorAll('#machinesTable tbody tr');

                rows.forEach(row => {
                    if (row.closest('tr').hasAttribute('data-status')) {
                        const rowStatus = row.getAttribute('data-status');

                        if (statusFilter === 'all' || rowStatus === statusFilter || rowStatus === statusFilter.replace(" ", "")) {
                            row.removeAttribute('data-filtered');
                        } else {
                            row.setAttribute('data-filtered', 'true');
                        }
                    }
                });

                // Reset to first page after filtering
                machinesCurrentPage = 1;
                updateMachinesDisplay();
            });

            // Filter functionality for production orders
            document.getElementById('applyOrderFilter').addEventListener('click', function() {
                const statusFilter = document.getElementById('orderTypeFilter').value;
                const dateFilter = document.getElementById('orderDateFilter').value;
                const rows = document.querySelectorAll('#ordersTable tbody tr');

                rows.forEach(row => {
                    if (row.closest('tr').hasAttribute('data-status')) {
                        const rowStatus = row.getAttribute('data-status');
                        const rowDate = row.getAttribute('data-date');

                        const statusMatch = statusFilter === 'all' || rowStatus === statusFilter || rowStatus === statusFilter.replace(" ", "");
                        const dateMatch = !dateFilter || rowDate === dateFilter;

                        if (statusMatch && dateMatch) {
                            row.removeAttribute('data-filtered');
                        } else {
                            row.setAttribute('data-filtered', 'true');
                        }
                    }
                });

                // Reset to first page after filtering
                ordersCurrentPage = 1;
                updateOrdersDisplay();
            });

            // Mobile sidebar toggle functionality
            const menuButton = document.querySelector('.menu-toggle');
            const sidebar = document.querySelector('.sidebar');
            const mainContent = document.querySelector('.main-content');

            function checkWindowSize() {
                if (window.innerWidth <= 768) {
                    if (sidebar) sidebar.style.transform = 'translateX(-100%)';
                    if (mainContent) mainContent.style.marginLeft = '0';
                    if (menuButton) menuButton.style.display = 'flex';
                } else {
                    if (sidebar) sidebar.style.transform = 'translateX(0)';
                    if (mainContent) mainContent.style.marginLeft = '280px';
                    if (menuButton) menuButton.style.display = 'none';
                }
            }

            // Initial check
            checkWindowSize();

            // Event listener for window resize
            window.addEventListener('resize', checkWindowSize);

            // Event listener for menu button click
            if (menuButton) {
                menuButton.addEventListener('click', function () {
                    if (sidebar.style.transform === 'translateX(0px)') {
                        sidebar.style.transform = 'translateX(-100%)';
                    } else {
                        sidebar.style.transform = 'translateX(0)';
                    }
                });
            }
        });
    </script>
    <style>
       
        /* Additional styles for filters */
        .filter-group {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .filter-select {
            padding: 0.375rem 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #e2e8f0;
            background-color: #f8fafc;
            color: #334155;
            font-size: 0.875rem;
        }

        .filter-date {
            padding: 0.375rem 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #e2e8f0;
            background-color: #f8fafc;
            color: #334155;
            font-size: 0.875rem;
        }

        /* Pagination styles */
        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 16px;
            margin-top: 20px;
            padding: 20px 0;
        }

        .pagination-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background 0.2s;
        }

            .pagination-btn:hover {
                background: #2563eb;
            }

            .pagination-btn:disabled {
                background: #94a3b8;
                cursor: not-allowed;
            }

        .pagination-info {
            color: #64748b;
            font-size: 0.875rem;
        }
    </style>
</body>
</html>