@model IEnumerable<Opti.Models.Machine>

@{
    ViewData["Title"] = "Machine Status";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f6fc;
            margin: 0;
        }

        /* Main container to align page info, search, and machines */
        .main-container {
            display: grid;
            grid-template-columns: 1fr; /* Initially stack items */
            gap: 20px;
            max-width: 1200px; /* Adjust as needed to match card width behavior */
            margin: 0 auto; /* Center the content */
        }

        /* Container for Page and Search Bar */
        .top-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            flex-wrap: wrap; /* Allow items to wrap on smaller screens */
            gap: 20px; /* Space between page info and search bar */
        }

        /* Page Indication */
        .page-indication {
            font-size: 18px;
            color: gray;
        }

        /* Search Box */
        .search-box {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            background-color: white;
            border-radius: 25px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 500px; /* Adjust width as needed */
            max-width: 100%; /* Ensure it doesn't overflow on small screens */
        }

            /* Search Input */
            .search-box input {
                border: none;
                background-color: #f5f5f5;
                outline: none;
                font-size: 16px;
                padding: 8px 15px;
                width: 100%;
                border-radius: 50px;
                color: #555;
                transition: all 0.3s ease;
            }

        /* Search Button Styling */
        .search-btn {
            background: none;
            border: none;
            color: black;
            cursor: pointer;
            font-size: 18px;
            margin-left: 10px;
        }

        .search-box input:focus {
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }

        /* Flexbox layout for machines */
        .machines {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Responsive grid */
            gap: 20px;
        }

        .machine-card {
            background-color: #ffffff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: left;
            transition: transform 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
            min-height: 300px;
            position: relative;
        }

            .machine-card:hover {
                transform: translateY(-10px);
            }

            .machine-card img {
                max-width: 100%;
                height: 200px;
                border-radius: 10px;
                margin-bottom: 10px;
                object-fit: cover; /* Maintain aspect ratio */
            }

            .machine-card .title {
                font-size: 18px;
                font-weight: bold;
                margin-top: 10px;
            }

            .machine-card .type {
                color: #777;
                margin-bottom: 5px;
            }

            .machine-card .status {
                font-weight: bold;
                margin: 10px 0;
            }

                .machine-card .status.operational {
                    color: #5cb85c;
                }

                .machine-card .status.under-maintenance {
                    color: #f0ad4e;
                }

                .machine-card .status.offline {
                    color: #d9534f;
                }

            .machine-card .buttons {
                position: absolute;
                bottom: 10px;
                left: 10px;
                right: 10px;
                display: flex;
                gap: 10px;
                justify-content: flex-end;
            }

            .machine-card .details-btn {
                background-color: #4a90e2;
                color: white;
                padding: 8px 15px;
                border-radius: 20px;
                text-decoration: none;
                font-size: 14px;
                transition: background-color 0.3s;
                border: none;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 5px;
            }

                .machine-card .details-btn:hover {
                    background-color: #357ab7;
                }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="top-section">
            <div class="page-indication">
                <p>Pages / Machine Status</p>
            </div>
            <div class="search-box">
                <form asp-action="Machines" method="get" style="display: flex; width: 100%;">
                    <input type="text" name="searchString" placeholder="Search" value="@ViewData["SearchQuery"]">
                    <button type="submit" class="search-btn">
                        <i class="fas fa-search"></i>
                    </button>
                </form>
            </div>
        </div>
        <div class="machines">
            @foreach (var machine in Model)
            {
                <div class="machine-card"
                     data-machine-id="@machine.MachineId">
                    <img src="@(string.IsNullOrEmpty(machine.ImagePath) ? "/images/machines/placeholder.jpg" : machine.ImagePath)" alt="@machine.MachineName">
                    <div class="title">@machine.MachineName</div>
                    <div class="type">Type: @machine.MachineType</div>
                    <div class="status @(machine.Status.ToLower().Replace(" ", "-"))">
                        Status: @machine.Status
                    </div>
                    <div class="buttons">
                        <button class="details-btn" onclick="showDetails(@machine.MachineId)">
                            <i class="fas fa-info-circle"></i> Details
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <div id="detailsModal" class="modal" style="display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
        <div class="modal-content" style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 60%; border-radius: 10px; position: relative;">
            <span class="close-button" style="color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;">&times;</span>
            <img id="modalImage" src="" alt="Machine Image" class="modal-image" style="max-width: 100%; max-height: 200px; border-radius: 5px; margin-bottom: 15px;">
            <h2 id="modalTitle" class="modal-title" style="font-size: 22px; font-weight: bold; margin-bottom: 10px;"></h2>
            <p id="modalType" class="modal-type" style="color: #777; margin-bottom: 8px;"></p>
            <p id="modalStatus" class="modal-status" style="font-weight: bold; margin-bottom: 15px;"></p>
            <p id="modalLastMaintenance" class="modal-last-maintenance" style="margin-bottom: 15px;"></p>
            <p id="modalEfficiency" class="modal-efficiency" style="margin-bottom: 15px;"></p>

            <h3 style="font-size: 18px; margin-top: 20px;">Maintenance History</h3>
            <div id="maintenanceHistory" style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px; padding: 10px;">
                <!-- Maintenance history will be populated here -->
            </div>
        </div>
    </div>

    <script>
        // Get the modal
        var modal = document.getElementById("detailsModal");

        // Get the close button
        var closeButton = document.querySelector(".close-button");

        // Get the elements to update in the modal
        var modalImage = document.getElementById("modalImage");
        var modalTitle = document.getElementById("modalTitle");
        var modalType = document.getElementById("modalType");
        var modalStatus = document.getElementById("modalStatus");
        var modalLastMaintenance = document.getElementById("modalLastMaintenance");
        var modalEfficiency = document.getElementById("modalEfficiency");
        var maintenanceHistory = document.getElementById("maintenanceHistory");

        // Show details function
        function showDetails(machineId) {
            fetch('/CustomerDashboard/GetMachineDetails?machineId=' + machineId)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        modalImage.src = data.imagePath;
                        modalTitle.textContent = data.machineName;
                        modalType.textContent = 'Type: ' + data.machineType;

                        // Set status with appropriate color
                        modalStatus.textContent = 'Status: ' + data.status;
                        modalStatus.className = 'modal-status';
                        if (data.status === 'Operational') {
                            modalStatus.style.color = '#5cb85c';
                        } else if (data.status === 'Under Maintenance') {
                            modalStatus.style.color = '#f0ad4e';
                        } else if (data.status === 'Offline') {
                            modalStatus.style.color = '#d9534f';
                        }

                        modalLastMaintenance.textContent = 'Last Maintenance: ' + data.lastMaintenance;
                        modalEfficiency.textContent = 'Efficiency: ' + data.efficiency;

                        // Clear and populate maintenance history
                        maintenanceHistory.innerHTML = '';
                        if (data.maintenanceHistory && data.maintenanceHistory.length > 0) {
                            data.maintenanceHistory.forEach(record => {
                                const historyItem = document.createElement('div');
                                historyItem.style.padding = '8px';
                                historyItem.style.borderBottom = '1px solid #eee';
                                historyItem.innerHTML = `
                                    <strong>${record.date}</strong>: ${record.action}<br>
                                    <small>Performed by: ${record.performedBy}</small>
                                `;
                                maintenanceHistory.appendChild(historyItem);
                            });
                        } else {
                            maintenanceHistory.innerHTML = '<p>No maintenance history available.</p>';
                        }

                        modal.style.display = "block";
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error fetching machine details');
                });
        }

        // Add event listener to the close button
        closeButton.addEventListener('click', function() {
            modal.style.display = "none";
        });

        // Close the modal if the user clicks outside of it
        window.addEventListener('click', function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</body>
</html>