@model List<Opti.Controllers.CustomerDashboardController.CartItem>

@{
    ViewData["Title"] = "Your Cart - NFT Marketplace";
    bool isUserLoggedIn = User.Identity.IsAuthenticated;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4895ef;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
            --light-bg: #f8f9fa;
            --card-bg: #ffffff;
            --text-primary: #333333;
            --text-secondary: #6c757d;
            --border-color: #e9ecef;
            --shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Poppins', sans-serif;
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 2rem;
            margin-bottom: 2rem;
            border: none;
        }

        .cart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

            .cart-header h2 {
                font-size: 1.75rem;
                font-weight: 600;
                color: var(--text-primary);
                margin: 0;
            }

        .back-to-shop {
            display: flex;
            align-items: center;
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

            .back-to-shop i {
                margin-right: 0.5rem;
            }

            .back-to-shop:hover {
                color: var(--secondary-color);
            }

        .table-wrapper {
            overflow: hidden;
            border-radius: 12px;
            margin-bottom: 2rem;
            background-color: var(--card-bg);
            box-shadow: var(--shadow);
        }

        .cart-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 0;
        }

            .cart-table thead th {
                background-color: var(--light-bg);
                padding: 1.25rem;
                text-align: left;
                font-weight: 600;
                color: var(--text-secondary);
                position: sticky;
                top: 0;
                z-index: 1;
                border-bottom: 1px solid var(--border-color);
            }

            .cart-table tbody td {
                padding: 1.5rem;
                border-bottom: 1px solid var(--border-color);
                vertical-align: middle;
            }

            .cart-table tbody tr:last-child td {
                border-bottom: none;
            }

            .cart-table tbody tr {
                transition: background-color 0.3s ease;
            }

                .cart-table tbody tr:hover {
                    background-color: rgba(67, 97, 238, 0.05);
                }

        .cart-item {
            display: flex;
            align-items: center;
        }

        .item-checkbox {
            margin-right: 1rem;
            width: 1.25rem;
            height: 1.25rem;
            accent-color: var(--primary-color);
            cursor: pointer;
        }

        .item-image {
            width: 70px;
            height: 70px;
            border-radius: 10px;
            margin-right: 1rem;
            object-fit: cover;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .item-details {
            flex-grow: 1;
        }

            .item-details h6 {
                font-size: 1.1rem;
                font-weight: 600;
                margin-bottom: 0.5rem;
                color: var(--text-primary);
            }

            .item-details p {
                font-size: 0.9rem;
                color: var(--text-secondary);
                margin-bottom: 0;
            }

        .quantity-control {
            display: flex;
            align-items: center;
            background-color: var(--light-bg);
            border-radius: 8px;
            padding: 0.25rem;
            width: fit-content;
        }

            .quantity-control button {
                border: none;
                background-color: transparent;
                color: var(--primary-color);
                width: 2rem;
                height: 2rem;
                font-size: 1rem;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                border-radius: 6px;
                transition: all 0.3s ease;
            }

                .quantity-control button:hover {
                    background-color: var(--primary-color);
                    color: white;
                }

            .quantity-control span {
                margin: 0 0.75rem;
                font-weight: 600;
                color: var(--text-primary);
                min-width: 1.5rem;
                text-align: center;
            }

        .item-price {
            font-weight: 600;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .action-buttons button {
            border: none;
            background-color: rgba(247, 37, 133, 0.1);
            color: var(--danger-color);
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .action-buttons button:hover {
                background-color: var(--danger-color);
                color: white;
            }

            .action-buttons button i {
                font-size: 1rem;
            }

        .cart-summary {
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 2rem;
        }

        .cart-summary-header {
            font-weight: 600;
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
            color: var(--text-primary);
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .summary-item-label {
            color: var(--text-secondary);
        }

        .summary-item-value {
            font-weight: 600;
        }

        .summary-total {
            border-top: 1px solid var(--border-color);
            margin-top: 1rem;
            padding-top: 1rem;
            display: flex;
            justify-content: space-between;
            font-size: 1.25rem;
        }

        .summary-total-label {
            font-weight: 600;
        }

        .summary-total-value {
            font-weight: 700;
            color: var(--primary-color);
        }

        .checkout-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 8px;
            width: 100%;
            font-weight: 600;
            margin-top: 1.5rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .checkout-btn:hover {
                background-color: var(--secondary-color);
            }

        .empty-cart {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 4rem 2rem;
            text-align: center;
        }

        .empty-cart-icon {
            font-size: 4rem;
            color: var(--accent-color);
            margin-bottom: 1.5rem;
            opacity: 0.6;
        }

        .empty-cart-title {
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .empty-cart-message {
            font-size: 1rem;
            color: var(--text-secondary);
            margin-bottom: 2rem;
        }

        .browse-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

            .browse-btn:hover {
                background-color: var(--secondary-color);
                color: white;
            }

        /* Login Required Message */
        .login-required {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 4rem 2rem;
            text-align: center;
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: var(--shadow);
        }

        .login-icon {
            font-size: 4rem;
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            opacity: 0.8;
        }

        .login-title {
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .login-message {
            font-size: 1.1rem;
            color: var(--text-secondary);
            margin-bottom: 2rem;
            max-width: 500px;
        }

        .login-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .login-btn:hover {
                background-color: var(--secondary-color);
                color: white;
            }
  
        .cart-table thead {
            display: none;
        }

        .cart-table, .cart-table tbody, .cart-table tr, .cart-table td {
            display: block;
            width: 100%;
            text-align: left;
        }

            .cart-table tr {
                margin-bottom: 1rem;
                border: 1px solid var(--border-color);
                border-radius: 8px;
                overflow: hidden;
                position: relative;
            }

            .cart-table td {
                padding: 0.75rem;
                border-bottom: 1px solid var(--border-color);
            }

                .cart-table td:last-child {
                    border-bottom: none;
                }

        .cart-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .item-image {
            margin-bottom: 0.75rem;
            width: 100%;
            height: 180px;
            border-radius: 8px 8px 0 0;
        }

        .item-details {
            margin-bottom: 0.75rem;
        }

        .quantity-control {
            margin-bottom: 0.75rem;
        }

        td:nth-of-type(1):before {
            content: "Select: ";
            font-weight: 600;
        }

        td:nth-of-type(3):before {
            content: "Quantity: ";
            font-weight: 600;
        }

        td:nth-of-type(4):before {
            content: "Price: ";
            font-weight: 600;
        }

        .action-buttons {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            z-index: 2;
        }

            .action-buttons button {
                background-color: rgba(255, 255, 255, 0.8);
            }

        /* Position footer at bottom of page */
        .footer {
            background-color: transparent;
            color: #fff;
            padding: 2rem 0;
            width: 100%;
            font-family: 'Poppins', sans-serif;
 
            bottom: 0;
            left: 0;
            height: 300px; /* Set actual footer height here */
        }
 
    </style>
</head>
<body>
    <div class="container">
        @if (!isUserLoggedIn)
        {
            <div class="login-required">
                <i class="fas fa-user-lock login-icon"></i>
                <h2 class="login-title">Login Required</h2>
                <p class="login-message">
                    You need to be logged in to view your cart and make purchases.
                    Please login to continue shopping and access your cart.
                </p>
                <a href="@Url.Action("Login", "Account", new { returnUrl = Url.Action("Cart", "CustomerDashboard") })" class="login-btn">
                    <i class="fas fa-sign-in-alt"></i> Log In to Continue
                </a>
                <div style="margin-top: 1.5rem;">
                    <p>Don't have an account?</p>
                    <a href="@Url.Action("Register", "Account")" class="browse-btn">
                        <i class="fas fa-user-plus"></i> Create an Account
                    </a>
                </div>
            </div>
        }
        else if (Model == null || !Model.Any())
        {
            <div class="card empty-cart">
                <i class="fas fa-shopping-cart empty-cart-icon"></i>
                <h2 class="empty-cart-title">Your cart is empty</h2>
                <p class="empty-cart-message">Looks like you haven't added any items to your cart yet.</p>
                <a href="@Url.Action("Index", "CustomerDashboard")" class="browse-btn">
                    <i class="fas fa-shopping-bag"></i> Browse Products
                </a>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="cart-header">
                            <h2>Your Shopping Cart</h2>
                            <a href="@Url.Action("Index", "CustomerDashboard")" class="back-to-shop">
                                <i class="fas fa-arrow-left"></i> Continue Shopping
                            </a>
                        </div>

                        <div class="table-wrapper">
                            <table class="cart-table">
                                <thead>
                                    <tr>
                                        <th width="5%"></th>
                                        <th width="45%">Product</th>
                                        <th width="20%">Quantity</th>
                                        <th width="15%">Price</th>
                                        <th width="15%">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr data-product-id="@item.ProductId">
                                            <td>
                                                <input type="checkbox" class="item-checkbox">
                                            </td>
                                            <td>
                                                <div class="cart-item">
                                                    <img src="@item.ImagePath" alt="@item.ProductName" class="item-image">
                                                    <div class="item-details">
                                                        <h6>@item.ProductName</h6>
                                                        <p>@item.Description</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="quantity-control">
                                                    <button onclick="updateQuantity(@item.ProductId, -1)">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <span class="quantity-value">@item.Quantity</span>
                                                    <button onclick="updateQuantity(@item.ProductId, 1)">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td class="item-price">₱@(item.Price * item.Quantity)</td>
                                            <td class="action-buttons">
                                                <button onclick="removeFromCart(@item.ProductId)" title="Remove item">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="cart-summary">
                        <h3 class="cart-summary-header">Order Summary</h3>

                        <div class="summary-item">
                            <span class="summary-item-label">Items (@Model.Sum(i => i.Quantity))</span>
                            <span class="summary-item-value">₱@Model.Sum(i => i.Price * i.Quantity)</span>
                        </div>

                        <div class="summary-item">
                            <span class="summary-item-label">Shipping</span>
                            <span class="summary-item-value">Free</span>
                        </div>

                        <div class="summary-total">
                            <span class="summary-total-label">Total</span>
                            <span class="summary-total-value">₱@ViewBag.TotalPrice</span>
                        </div>

                        <button class="checkout-btn" onclick="checkout()">
                            <i class="fas fa-lock"></i> Proceed to Checkout
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <footer class="footer">  
        <hr> 
        <div class="footer-bottom">
            <div class="copyright">
                © 2025 - OptiFlow. All rights reserved.
            </div>
            <div class="footer-bottom-links">
                <a href="#">Privacy Policy</a>
                <a href="#">Terms of Service</a>
                <a href="#">Cookie Policy</a>
            </div>
        </div> 
    </footer>

    <script>
        // Function to update cart count display
        function updateCartCount(count) {
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
                cartCountElement.textContent = count;
            }
        }

        // Update item quantity
        function updateQuantity(productId, change) {
            fetch('/CustomerDashboard/UpdateCartQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `productId=${productId}&change=${change}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update cart count badge
                    updateCartCount(data.itemCount);

                    // If item was removed (quantity = 0), remove the row
                    if (data.newQuantity <= 0) {
                        let row = document.querySelector(`tr[data-product-id="${productId}"]`);
                        if (row) {
                            row.remove();
                        }

                        // If no items left, show empty cart message
                        if (data.itemCount === 0) {
                            location.reload();
                        }
                    } else {
                        // Update quantity display
                        let quantitySpan = document.querySelector(`tr[data-product-id="${productId}"] .quantity-value`);
                        if (quantitySpan) {
                            quantitySpan.textContent = data.newQuantity;
                        }

                        // Update item subtotal
                        let priceCell = document.querySelector(`tr[data-product-id="${productId}"] .item-price`);
                        if (priceCell) {
                            priceCell.textContent = `₱${data.itemSubtotal}`;
                        }
                    }

                    // Update summary
                    document.querySelector('.summary-item-value').textContent = `₱${data.cartTotal}`;
                    document.querySelector('.summary-total-value').textContent = `₱${data.cartTotal}`;
                } else {
                    // Check if login is required
                    if (data.requireLogin) {
                        showLoginPrompt(data.message);
                    } else {
                        alert(data.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating quantity. Please try again later.');
            });
        }

        // Remove item from cart
        function removeFromCart(productId) {
            fetch('/CustomerDashboard/RemoveFromCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `productId=${productId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update cart count badge
                    updateCartCount(data.itemCount);

                    let row = document.querySelector(`tr[data-product-id="${productId}"]`);
                    if (row) {
                        row.remove();
                    }

                    // Update total price
                    document.querySelector('.summary-item-value').textContent = `₱${data.cartTotal}`;
                    document.querySelector('.summary-total-value').textContent = `₱${data.cartTotal}`;

                    // If no items left, show empty cart message
                    if (data.itemCount === 0) {
                        location.reload();
                    }
                } else {
                    // Check if login is required
                    if (data.requireLogin) {
                        showLoginPrompt(data.message);
                    } else {
                        alert(data.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error removing item from cart');
            });
        }

        // Show login modal or redirect to login page
        function showLoginPrompt(message) {
            if (confirm(message + " Would you like to login now?")) {
                window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
            }
        }

        // Checkout function
        function checkout() {
            // Get all selected items
            const selectedItems = [];
            document.querySelectorAll('.item-checkbox:checked').forEach(checkbox => {
                const row = checkbox.closest('tr');
                const productId = row.dataset.productId;
                selectedItems.push(productId);
            });

            if (selectedItems.length === 0) {
                alert('Please select at least one item to checkout');
                return;
            }

            // Redirect to checkout page or show checkout modal
            alert('Proceeding to checkout with selected items');
            // Implement your checkout logic here
        }

        // Select all checkbox
        const selectAllCheckbox = document.createElement('input');
        selectAllCheckbox.type = 'checkbox';
        selectAllCheckbox.className = 'item-checkbox';
        const headerCell = document.querySelector('thead th:first-child');
        if (headerCell) {
            headerCell.appendChild(selectAllCheckbox);

            selectAllCheckbox.addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.item-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }

        // Initialize cart count when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // If Model.Count is available directly in the view, use:
            // updateCartCount(@Model.Count);

            // Otherwise, fetch the count:
            fetch('/CustomerDashboard/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    updateCartCount(data.count);
                })
                .catch(error => console.error('Error loading cart count:', error));
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</body>
</html>