@model IEnumerable<Opti.Models.Product>

@{
    ViewData["Title"] = "Products";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f6fc;
            margin: 0;
        }

        /* Main container to align page info, search, and products */
        .main-container {
            display: grid;
            grid-template-columns: 1fr; /* Initially stack items */
            gap: 20px;
            max-width: 1200px; /* Adjust as needed to match card width behavior */
            margin: 0 auto; /* Center the content */
        }

        /* Container for Page and Search Bar */
        .top-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            flex-wrap: wrap; /* Allow items to wrap on smaller screens */
            gap: 20px; /* Space between page info and search bar */
        }

        /* Page Indication */
        .page-indication {
            font-size: 18px;
            color: gray;
        }

        /* Breadcrumb styles */
        .breadcrumbs {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            flex-wrap: wrap;
        }

            .breadcrumbs li {
                display: inline-flex;
                align-items: center;
            }

                .breadcrumbs li:not(:last-child)::after {
                    content: "/";
                    margin: 0 10px;
                    color: #aaa;
                }

            .breadcrumbs a {
                color: #4a90e2;
                text-decoration: none;
                transition: color 0.3s;
            }

                .breadcrumbs a:hover {
                    color: #357ab7;
                    text-decoration: underline;
                }

            .breadcrumbs .current {
                color: #555;
                font-weight: 500;
            }

        /* Search Box */
        .search-box {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            background-color: white;
            border-radius: 25px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 500px; /* Adjust width as needed */
            max-width: 100%; /* Ensure it doesn't overflow on small screens */
        }

            /* Search Input */
            .search-box input {
                border: none;
                background-color: #f5f5f5;
                outline: none;
                font-size: 16px;
                padding: 8px 15px;
                width: 100%;
                border-radius: 50px;
                color: #555;
                transition: all 0.3s ease;
            }

        /* Search Button Styling */
        .search-btn {
            background: none;
            border: none;
            color: black;
            cursor: pointer;
            font-size: 18px;
            margin-left: 10px;
        }

        .search-box input:focus {
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }

        /* Flexbox layout for products */
        /* Flexbox layout for products - MODIFIED */
        .products {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* Changed from auto-fit to auto-fill */
            gap: 20px;
            width: 100%;
        }

        /* No results message - MODIFIED */
        .no-results {
            text-align: center;
            padding: 40px 20px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            grid-column: 1 / span 3; /* Fixed span instead of spanning all columns */
            max-width: 300px; /* Match the width of product cards */
            margin: 0 auto; /* Center the no results message */
        }

        .product-card {
            background-color: #ffffff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: left;
            transition: transform 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
            min-height: 300px;
            position: relative;
        }

            .product-card:hover {
                transform: translateY(-10px);
            }

            .product-card img {
                max-width: 100%;
                height: 200px;
                border-radius: 10px;
                margin-bottom: 10px;
                object-fit: cover; /* Maintain aspect ratio */
            }

            .product-card .title {
                font-size: 18px;
                font-weight: bold;
                margin-top: 10px;
            }

            .product-card .author {
                color: #777;
                margin-bottom: 5px;
            }

            .product-card .price {
                color: #4a90e2;
                font-weight: bold;
                margin: 10px 0;
            }

            .product-card .buttons {
                position: absolute;
                bottom: 10px;
                left: 10px;
                right: 10px;
                display: flex;
                gap: 10px;
                justify-content: flex-end;
            }

            .product-card .details-btn,
            .product-card .add-to-cart-btn {
                background-color: #4a90e2;
                color: white;
                padding: 8px 15px;
                border-radius: 20px;
                text-decoration: none;
                font-size: 14px;
                transition: background-color 0.3s;
                border: none;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 5px;
            }

                .product-card .details-btn:hover,
                .product-card .add-to-cart-btn:hover {
                    background-color: #357ab7;
                }

            .product-card .add-to-cart-btn {
                background-color: #5cb85c;
            }
        /* Position footer at bottom of page */
        .footer {
            background-color: transparent;
            color: #fff;
            padding: 2rem 0;
            width: 100%;
            font-family: 'Poppins', sans-serif;
            bottom: 0;
            left: 0;
            height: 300px; /* Set actual footer height here */
        }

        /* No results message */
        .no-results {
            text-align: center;
            padding: 40px 20px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            grid-column: 1 / -1;
        }

            .no-results h3 {
                font-size: 20px;
                margin-bottom: 15px;
                color: #333;
            }

            .no-results p {
                color: #777;
                margin-bottom: 20px;
            }

            .no-results i {
                font-size: 50px;
                color: #ddd;
                margin-bottom: 20px;
                display: block;
            }

        .btn-primary {
            background-color: #4a90e2;
            border-color: #4a90e2;
            padding: 8px 20px;
            border-radius: 20px;
        }

            .btn-primary:hover {
                background-color: #357ab7;
                border-color: #357ab7;
            }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="top-section">
            <div class="page-indication">
                @if (ViewData["Breadcrumbs"] != null)
                {
                    var breadcrumbs = (List<Opti.Controllers.Breadcrumb>)ViewData["Breadcrumbs"];
                    <ul class="breadcrumbs">
                        @for (int i = 0; i < breadcrumbs.Count; i++)
                        {
                            var breadcrumb = breadcrumbs[i];
                            <li>
                                @if (string.IsNullOrEmpty(breadcrumb.Url))
                                {
                                    <span class="current">@breadcrumb.Title</span>
                                }
                                else
                                {
                                    <a href="@breadcrumb.Url">@breadcrumb.Title</a>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Pages / Products</p>
                }
            </div>
            <div class="search-box">
                <form asp-action="Search" method="get" style="display: flex; width: 100%;">
                    <input type="text" name="searchString" placeholder="Search">
                    <button type="submit" class="search-btn">
                        <i class="fas fa-search"></i>
                    </button>
                </form>
            </div>
        </div>

        <div class="products">
            @if (Model.Any())
            {
                @foreach (var product in Model)
                {
                    <div class="product-card"
                         data-product-id="@product.ProductId">
                        <img src="@product.ImagePath" alt="@product.ProductName">
                        <div class="title">@product.ProductName</div>
                        <div class="author">@product.Description</div>
                        <div class="price">Price: $@product.Price</div>
                        <div class="buttons">
                            <button class="add-to-cart-btn" onclick="addToCart(@product.ProductId)">
                                <i class="fas fa-shopping-cart"></i> Add to Cart
                            </button>
                            <button class="details-btn" onclick="showDetails(@product.ProductId)">Details</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h3>No products found</h3>
                    @if (!string.IsNullOrEmpty((string)ViewData["SearchQuery"]))
                    {
                        <p>We couldn't find any products matching your search: "@ViewData["SearchQuery"]"</p> 
                    }
                    else
                    {
                        <p>There are no products available at the moment.</p>
                    }
                </div>
            }
        </div>
    </div>

    <div id="detailsModal" class="modal" style="display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
        <div class="modal-content" style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 40%; border-radius: 10px; position: relative;">
            <span class="close-button" style="color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;">&times;</span>
            <img id="modalImage" src="" alt="Product Image" class="modal-image" style="max-width: 100%; border-radius: 5px; margin-bottom: 15px;">
            <h2 id="modalTitle" class="modal-title" style="font-size: 22px; font-weight: bold; margin-bottom: 10px;"></h2>
            <p id="modalAuthor" class="modal-author" style="color: #777; margin-bottom: 8px;"></p>
            <p id="modalPrice" class="modal-price" style="color: #4a90e2; font-weight: bold; font-size: 16px; margin-bottom: 15px;"></p>
            <p id="modalDescription" class="modal-description" style="margin-bottom: 15px;"></p>
            <p id="modalStock" class="modal-stock" style="color: #5cb85c; margin-bottom: 15px;"></p>
        </div>
    </div>

    <footer class="footer">
        <hr>
        <div class="footer-bottom">
            <div class="copyright">
                © 2025 - OptiFlow. All rights reserved.
            </div>
            <div class="footer-bottom-links">
                <a href="#">Privacy Policy</a>
                <a href="#">Terms of Service</a>
                <a href="#">Cookie Policy</a>
            </div>
        </div>
    </footer>

    <script>
        // Get the modal
        var modal = document.getElementById("detailsModal");

        // Get the close button
        var closeButton = document.querySelector(".close-button");

        // Get the elements to update in the modal
        var modalImage = document.getElementById("modalImage");
        var modalTitle = document.getElementById("modalTitle");
        var modalAuthor = document.getElementById("modalAuthor");
        var modalPrice = document.getElementById("modalPrice");
        var modalDescription = document.getElementById("modalDescription");
        var modalStock = document.getElementById("modalStock");

         function showDetails(productId) {
            console.log("Details button clicked for product ID:", productId);
            fetch('/CustomerDashboard/Details/' + productId)
                .then(response => {
                    console.log("Response received:", response);
                    if (!response.ok) {
                        throw new Error("Network response was not ok: " + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Data received:", data);
                    modalImage.src = data.imagePath;
                    modalTitle.textContent = data.productName;
                    modalAuthor.textContent = 'Created: ' + new Date(data.createdAt).toLocaleDateString();
                    modalPrice.textContent = 'Price: ₱' + data.price;
                    modalDescription.textContent = data.description;
                    modalStock.textContent = 'In Stock: ' + data.stockQuantity + ' items';

                    // Force the modal to be visible
                    modal.style.display = "block";
                    console.log("Modal display style set to:", modal.style.display);
                })
                .catch(error => {
                    console.error('Error in showDetails:', error);
                    alert("Error loading product details. See console for more information.");
                });
        }

        // Add to cart function
        function addToCart(productId) {
            fetch('/CustomerDashboard/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'productId=' + productId
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    // Optionally update cart icon count if you have one
                    // document.querySelector('.cart-count').textContent = data.cartCount;
                } else {
                    // Check if login is required
                    if (data.requireLogin) {
                        if (confirm(data.message + " Would you like to login now?")) {
                            window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                        }
                    } else {
                        alert('Error: ' + data.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding to cart');
            });
        }

             // Function to update cart count display
        function updateCartCount(count) {
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
                cartCountElement.textContent = count;
            }
        }

        // Load the initial cart count when page loads
        document.addEventListener('DOMContentLoaded', function() {
            fetch('/CustomerDashboard/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    updateCartCount(data.count);
                })
                .catch(error => console.error('Error loading cart count:', error));
        });

        // Add event listener to the close button
        closeButton.addEventListener('click', function() {
            modal.style.display = "none";
        });

        // Close the modal if the user clicks outside of it
        window.addEventListener('click', function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</body>
</html>