@model IEnumerable<Opti.Models.Product>
@if (!User.Identity.IsAuthenticated)
{
        <script>
            window.location.href = '@Url.Action("Login", "Account", new { returnUrl = Context.Request.Path })';
        </script>
    return;
}
@{
    ViewData["Title"] = "Products";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/customer.css" />
    <link rel="stylesheet" href="~/css/toast.css" />
</head>
<body>
    <div class="main-container">
        <div class="top-section">
            <div class="page-indication">
                @if (ViewData["Breadcrumbs"] != null)
                {
                    var breadcrumbs = (List<Opti.Controllers.Breadcrumb>)ViewData["Breadcrumbs"];
                        <ul class="breadcrumbs">
                        @for (int i = 0; i < breadcrumbs.Count; i++)
                        {
                            var breadcrumb = breadcrumbs[i];
                                    <li>
                                @if (string.IsNullOrEmpty(breadcrumb.Url))
                                {
                                                <span class="current">@breadcrumb.Title</span>
                                }
                                else
                                {
                                                <a href="@breadcrumb.Url">@breadcrumb.Title</a>
                                }
                                    </li>
                        }
                        </ul>
                }
                else
                {
                        <p>Pages / Products</p>
                }
            </div>
            <div class="search-box">
                <form asp-action="Search" method="get" style="display: flex; width: 100%;">
                    <input type="text" name="searchString" placeholder="Search">
                    <button type="submit" class="search-btn">
                        <i class="fas fa-search"></i>
                    </button>
                </form>
            </div>
        </div>

        <div class="products">
            @if (Model.Any())
            {
                @foreach (var product in Model)
                {
                            <div class="product-card"
                                 data-product-id="@product.ProductId">
                                <img src="@product.ImagePath" alt="@product.ProductName">
                                <div class="title">@product.ProductName</div>
                                <div class="author">@product.Description</div>
                                <div class="price">Price: ₱@product.Price</div>
                                <div class="stock">In Stock: @product.StockQuantity</div>
                                <div class="buttons">
                                    <button class="add-to-cart-btn" onclick="addToCart(@product.ProductId)" @(product.StockQuantity < 1 ? "disabled" : "")>
                                        <i class="fas fa-shopping-cart"></i> @(product.StockQuantity < 1 ? "Out of Stock" : "Add to Cart")
                                    </button>
                                </div>
                            </div>
                }
            }
            else
            {
                    <div class="no-results">
                        <i class="fas fa-search"></i>
                        <h3>No products found</h3>
                    @if (!string.IsNullOrEmpty((string)ViewData["SearchQuery"]))
                    {
                                <p>We couldn't find any products matching your search: "@ViewData["SearchQuery"]"</p> 
                    }
                    else
                    {
                                <p>There are no products available at the moment.</p>
                    }
                    </div>
            }
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast-container">
        <div class="toast-content">
            <i id="toast-icon" class="fas fa-check-circle"></i>
            <div class="toast-message">
                <span id="toast-title" class="toast-title">Success</span>
                <span id="toast-desc" class="toast-desc">Item added to cart successfully!</span>
            </div>
        </div>
        <div class="toast-progress"></div>
    </div>

    <footer class="footer">
        <div class="footer-copyright">© 2025 - OptiFlow. All rights reserved.</div>
        <div class="footer-links">
            <a href="/privacy">Privacy Policy</a>
            <a href="/terms">Terms of Service</a>
            <a href="/cookies">Cookie Policy</a>
        </div>
    </footer>

    <script>

        // Add to cart function - Improved version that creates a CustomerOrder
        function addToCart(productId) {
            fetch('/CustomerOrders/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: 'productId=' + productId + '&quantity=1'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success toast with product name
                    showToast('Added to Cart', data.productName + ' added to your cart', 'success');

                    // Update order count indicator if exists
                    updateOrderCount(data.orderCount);

                    // Update UI for product stock if needed
                    updateProductStockUI(productId);
                } else {
                    // Check if login is required
                    if (data.requireLogin) {
                        if (confirm(data.message + " Would you like to login now?")) {
                            window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                        }
                    } else {
                        showToast('Error', data.message, 'error');
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to add item to cart', 'error');
            });
        }

        // Show toast message
        function showToast(title, message, type = 'success') {
            // Set toast content
            toastTitle.textContent = title;
            toastDesc.textContent = message;

            // Set toast type
            if (type === 'success') {
                toast.className = 'toast-container toast-success';
                toastIcon.className = 'fas fa-check-circle';
            } else if (type === 'error') {
                toast.className = 'toast-container toast-error';
                toastIcon.className = 'fas fa-exclamation-circle';
            } else if (type === 'warning') {
                toast.className = 'toast-container toast-warning';
                toastIcon.className = 'fas fa-exclamation-triangle';
            }

            // Show toast
            toast.classList.add('active');

            // Hide after 5 seconds
            setTimeout(() => {
                toast.classList.remove('active');
            }, 5000);
        }

        // Update order count display
        function updateOrderCount(count) {
            const orderCountElement = document.querySelector('.order-count');
            if (orderCountElement) {
                orderCountElement.textContent = count;
                orderCountElement.classList.add('pulse');

                // Remove pulse animation after it completes
                setTimeout(() => {
                    orderCountElement.classList.remove('pulse');
                }, 1000);
            }
        }

        // Update product stock UI after adding to cart
        function updateProductStockUI(productId) {
            // Refresh the page might be simplest, but could also update UI dynamically
            // by fetching updated product info and updating the display

            // For now, let's schedule a page refresh after a short delay
            // This ensures all UI elements reflect the new stock level
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        }

        // Modal Add to Cart button event
        modalAddToCartBtn.addEventListener('click', function() {
            if (currentProductId) {
                addToCart(currentProductId);
                modal.style.display = "none";
            }
        });

        // Close modal events
        closeButton.addEventListener('click', function() {
            modal.style.display = "none";
        });

        window.addEventListener('click', function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        });

        // Load initial order count
        document.addEventListener('DOMContentLoaded', function() {
            fetch('/CustomerOrders/GetOrderCount')
                .then(response => response.json())
                .then(data => {
                    updateOrderCount(data.count);
                })
                .catch(error => console.error('Error loading order count:', error));
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</body>
</html>